# from PIL import Image
# import io
import base64
import io
import PIL.Image as Image
import json
import utils
from config import Settings
setting = Settings()

# # Convert image to bytes
# def image_to_bytes(image_path):
#     with open(image_path, 'rb') as f:
#         return f.read()

# # Convert bytes to string
# def bytes_to_string(byte_data):
#     return byte_data.decode('latin-1')  # Use 'latin-1' encoding for arbitrary byte data

# # Convert string to bytes
# def string_to_bytes(string_data):
#     return string_data.encode('latin-1')

# # Convert bytes to image
# def bytes_to_image(byte_data):
#     image = Image.open(io.BytesIO(byte_data))
#     return image

# # Example usage
# image_path = './cat.png'

# # Convert image to bytes
# image_bytes = image_to_bytes(image_path)
# print("image bytes" , type(image_bytes),len(image_bytes))
# # Convert bytes to string
# byte_string = bytes_to_string(image_bytes)
# print("byte_string" , type(byte_string),len(byte_string))

# # Convert string to bytes
# string_bytes = string_to_bytes(byte_string)
# print("string_bytes" , type(string_bytes),len(string_bytes))

# # Convert bytes to image
# recovered_image = bytes_to_image(string_bytes)

# # Display the recovered image
# recovered_image.show()


# importing the requests library
# import requests ,shutil

# # api-endpoint
# URL = "http://127.0.0.1:8000/captchas/"

# # location given here
# location = "delhi technological university"

# # defining a params dict for the parameters to be sent to the API
# PARAMS = {'address':location}

# # sending get request and saving the response as response object
# r = requests.get(url = URL,stream=True)

# # extracting data in json format
# print(r.headers["content-type"])
# with open('img.png', 'wb') as out_file:
#     shutil.copyfileobj(r.raw, out_file)
# del r

# # Set the appropriate content types
#     json_response.headers['Content-Type'] = 'application/json'
#     json_response.headers['Image-Content-Type'] = 'image/jpeg'

# hash = aes_encrypt("oh yeah", temp_key)
# for k,v in hash.items():
#     print(hash[k])
#     hash[k]=base64.b64encode(v).decode('ascii')

# for k,v in hash.items():
#     hash[k]=(base64.b64decode(v))
#     # hash[k]=str(hash[k],'ascii',errors=)
#     print(hash[k])
# print(aes_decrypt(hash['ciphertext'], hash['tag'], temp_key, hash['nonce']))

# test = "hello"
# print(0, test)
# test = bytes(test, 'ascii')
# print(1, test)
# test = base64.b64encode(test)
# print(2, test)
# test = test.decode('ascii')
# print(3, (test))
# test = base64.b64decode(test)
# print(4, test)
# test = str(test,'ascii')
# print(5, test)
json_finally = "{\"image\": \"\", \"hash\": \"{\\\"ciphertext\\\": \\\"O/GY6DZKBjSe+vu5Zdp+qa+2eccvSp6Sx3O6WJfVi5PN6a0zA0We84+YfMl9Ey96gjngp321xP72MMaurXvFwipGaf0LyWEzoEFLk9l4Dt4MZJlDPMc/c5NoT0zXv5Ud1sqJNofQHSImJ7BqZ1v0vA==\\\", \\\"tag\\\": \\\"n0+83TZ1Cn6vRGOJMq1wBg==\\\", \\\"nonce\\\": \\\"OK1ZYamRcXIK/o8zY74/5Q==\\\"}\"}"
print(type(json_finally))
json_finally = json.loads(json_finally)
print(type(json_finally))
image = (utils.b64string2hexbits(json_finally['image']))
image_print = image
hash = json.loads(json_finally['hash'])
for k, v in hash.items():
    hash[k] = utils.b64string2hexbits(hash[k])
key = setting.secret_key_aes
key = bytes(key, 'ascii')
text_recovered = (utils.aes_decrypt(
    hash['ciphertext'], hash['tag'], key, hash['nonce']))
text_recovered = json.loads(text_recovered)
print(type(text_recovered))
for k,v in text_recovered.items():
    print(k, ":" ,v)

# from byte_array import byte_data
utils.bytes2imageObject(image_print).save('./captcha3.png')
# # using tobytes data as raw for frombyte function

# img = Image.frombytes("L", (200, 90), image)
# img.show()
# from datetime import datetime , timedelta
# import time
# t1 = datetime.now()
# time.sleep(2)
# t2 = datetime.now()
# print(float((t1-t2).total_seconds()))
# if float((t1-t2).total_seconds())<0:
#     print("oh")


